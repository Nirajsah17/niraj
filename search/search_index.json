{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Self-Learning Journey \ud83d\udcd8","text":"<p>Welcome to my self-learning GitHub repository! This repo documents my journey of continuous learning and growth in various fields, including programming, algorithms, data structures, artificial intelligence, web development, and more.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Goals</li> <li>Learning Topics</li> <li>Project Structure</li> <li>Resources</li> <li>How to Use this Repo</li> <li>Future Plans</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>This repository serves as a collection of the exercises, notes, projects, and code snippets I\u2019ve worked on while learning various concepts and technologies. It\u2019s a living document that grows as I dive deeper into new topics and revisit previously learned material.</p>"},{"location":"#goals","title":"Goals","text":"<ol> <li>Build a solid foundation in key programming concepts.</li> <li>Solve algorithmic problems to improve problem-solving skills.</li> <li>Develop hands-on projects to apply theoretical knowledge.</li> <li>Explore advanced topics such as AI, computer vision, and data science.</li> <li>Document my learning process and progress for future reference.</li> </ol>"},{"location":"#learning-topics","title":"Learning Topics","text":"<p>Some of the key areas covered in this repo: - Programming Languages: JavaScript, Python, etc. - Algorithms and Data Structures: Arrays, Strings, Sliding Window, Dynamic Programming, etc. - Web Development: HTML, CSS, JavaScript, Frontend Frameworks, Backend Development, etc. - Artificial Intelligence: Machine Learning, Deep Learning, Computer Vision, etc. - Projects: Full-stack applications, data analysis tools, AI models, etc.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The repository is organized as follows:</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation-platform.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 github-jekyl.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.sh\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirement.txt\n</code></pre> <p>Each folder contains relevant code snippets, problem solutions, and notes.</p>"},{"location":"#resources","title":"Resources","text":"<p>Here are some of the resources I frequently refer to during my learning: - Books: [Insert book titles] - Online Courses: [Insert course links] - Websites: [Insert websites/blogs] - YouTube Channels: [Insert channels]</p>"},{"location":"#how-to-use-this-repo","title":"How to Use this Repo","text":"<ul> <li>Browse through the folders based on topics of interest.</li> <li>Check out the projects folder for hands-on implementations.</li> <li>Refer to the notes folder for detailed explanations and documentation.</li> <li>Feel free to clone the repository and use it for your own learning!</li> </ul>"},{"location":"#future-plans","title":"Future Plans","text":"<ul> <li>Dive deeper into advanced data structures and algorithms.</li> <li>Build more full-stack projects.</li> <li>Experiment with AI-based solutions in real-world applications.</li> <li>Expand the repository to include collaborative learning initiatives.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This repository is primarily for personal learning, but contributions are welcome! If you find a better solution, have suggestions, or want to share your own learning path, feel free to submit a pull request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"example/","title":"Welcome to Practice","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"example/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> init.py<pre><code>def add (a,b):\n  return a + b\n</code></pre>"},{"location":"example/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"example/#code","title":"Code","text":"<pre><code>def sort():\n    return pass\n</code></pre>"},{"location":"github-jekyl/","title":"Github Pages using Jekyll","text":""},{"location":"github-jekyl/#getting-started","title":"Getting Started","text":""},{"location":"github-jekyl/#step-1-installation-of-ruby-with-ruby-environmet-manager-similar-to-nvm","title":"Step 1 [Installation of ruby with ruby environmet manager similar to nvm]","text":"<ol> <li>Updating package manager and installing essential tools from apt</li> </ol> <pre><code>sudo apt update\nsudo apt install -y curl gpg build-essential libffi-dev libyaml-dev libssl-dev libgdbm-dev libncurses5-dev libsqlite3-dev\n</code></pre> <ol> <li>Install rbenv and Ruby-build:</li> </ol> <pre><code>curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-installer | bash\n</code></pre> <ol> <li>Add rbenv to your shell:</li> </ol> <pre><code>echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <ol> <li>Install Ruby:</li> </ol> <pre><code>rbenv install 3.2.0  # Or any latest version\nrbenv global 3.2.0\n</code></pre>"},{"location":"github-jekyl/#step-2-install-bundler-and-jekyll","title":"Step 2 [Install Bundler and Jekyll]","text":"<pre><code>gem install bundler jekyll\n</code></pre>"},{"location":"github-jekyl/#step-3-create-a-repository","title":"Step 3 [Create a repository]","text":"<ol> <li>Goto to your github and create new repo with <code>your_user_name</code> as repo name.</li> </ol> <p>Note : This repo considered as you profile repo, so no need to setup github workflow. Github automatically do it for you. Even though you can configured by your own as well.</p> <ol> <li> <p>Create file <code>_config.yml</code></p> </li> <li> <p>Add these lines</p> </li> </ol> <pre><code>title: Niraj Kumar Sah # Your user_name\nlogo: ./images/niraj.png # Logo image path\ndescription: Software Engineer @Mapmyindia # Description text\nshow_downloads: true # Tells you download option of your page (tar| zip) format\ntheme: jekyll-theme-minimal # here you can choose theme of your choices\n</code></pre> <p>Note : Image path should be there, If not create directory <code>images</code> and put image <code>name.png</code>.</p> <ol> <li>Create a <code>README.md</code> Add Profile Information</li> </ol>"},{"location":"github-jekyl/#step-4-configure-jekyll","title":"Step 4 Configure jekyll","text":"<ol> <li> <p>Create <code>Gemfile</code></p> </li> <li> <p>Add the following dependencies</p> </li> </ol> <pre><code>source \"https://rubygems.org\"\n\ngem \"jekyll\", \"~&gt; 3.9.5\"\ngem \"github-pages\", group: :jekyll_plugins\ngem \"webrick\"  # Add this line\n</code></pre>"},{"location":"github-jekyl/#step-5-build-and-deploy","title":"Step 5 [Build and deploy]","text":"<ol> <li>Install related dependencies</li> </ol> <pre><code>bundle install\n</code></pre> <ol> <li>Build and serve</li> </ol> <pre><code>bundle exec jekyll serve\n</code></pre> <p>You have successfulluy serve your profile page at <code>https://localhost:4000</code></p>"},{"location":"computer_vision/","title":"Computer Vision","text":""},{"location":"computer_vision/#computer-vision_1","title":"Computer Vision \ud83d\uddbc\ufe0f","text":"<p>The computer vision section explores techniques and technologies for enabling machines to interpret and understand visual information from the world. This area involves:</p> <ul> <li>Image Processing: Techniques for manipulating and analyzing images, including filtering, transformation, and feature extraction.</li> <li>Object Detection &amp; Recognition: Methods for identifying and locating objects within images or video streams, utilizing algorithms like YOLO, SSD, and Faster R-CNN.</li> <li>Image Classification: Using machine learning models to classify images into categories, with frameworks like TensorFlow and PyTorch.</li> <li>Feature Matching: Techniques for finding corresponding features between images, useful in applications like panorama stitching and 3D reconstruction.</li> <li>Deep Learning for Vision: Leveraging convolutional neural networks (CNNs) and other deep learning architectures to tackle complex vision tasks.</li> <li>Applications: Practical uses of computer vision in areas like augmented reality, facial recognition, autonomous vehicles, and medical imaging.</li> </ul> <p>This section includes hands-on projects, code implementations, and research papers that demonstrate the application of computer vision techniques in real-world scenarios.</p>"},{"location":"package/observable/","title":"Observable Hooks","text":"<p>Observable Module This is a lightweight and reusable Observable module inspired by React hooks. It provides a simple way to observe changes to an object's properties and subscribe to those changes using callback functions.</p> <p>Installations</p> <p>To use this module, simply import the <code>useObservable</code> function from the <code>observable-hooks</code> file:</p> <pre><code>import useObservable from \"observable-hooks\";\n</code></pre> <p>Usage</p> <ol> <li>Create an observable object:</li> </ol> <pre><code>const person = { name: \"John\", age: 30 };\nconst observable = useObservable(person);\n</code></pre> <ol> <li>Subscribe to changes:</li> </ol> <pre><code>const unsubscribe = observable.subscribe((prop, value) =&gt; {\n  console.log(`${prop} changed to ${value}`);\n});\n</code></pre> <ol> <li>Update properties:</li> </ol> <pre><code>observable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"name\", \"Jane\"); // Output: \"name changed to Jane\"\n</code></pre> <ol> <li>Unsubscribe from changes (optional):</li> </ol> <pre><code>unsubscribe();\n</code></pre> <p>API <code>useObservable(obj)</code></p> <p><code>obj (Object)</code>: The object to be observed. Returns an object with the following methods:</p> <p><code>subscribe(callback)</code></p> <p><code>callback (Function)</code>: The function to be called when a property changes. It receives two arguments: prop (the property name) and value (the new value).</p> <p><code>unsubscribe(callback)</code></p> <p><code>callback (Function)</code>: The function to be unsubscribed from property changes.</p> <p><code>set(prop, value)</code></p> <p><code>prop (string)</code>: The property name to update. <code>value (any)</code>: The new value for the property.</p> <p><code>get(prop)</code></p> <p><code>prop (string)</code>: The property name to retrieve. Returns the current value of the property.</p>"},{"location":"package/observable/#simple-object-and-array-observable","title":"Simple Object and array Observable","text":"<pre><code>import useObservable from \"observable-hooks\";\n\nconst person = { name: \"John\", age: 30 };\nconst observable = useObservable(person);\n\nconst unsubscribe = observable.subscribe((prop, value) =&gt; {\n  console.log(`${prop} changed to ${value}`);\n});\n\nobservable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"name\", \"Jane\"); // Output: \"name changed to Jane\"\n\nunsubscribe();\n\nobservable.set(\"age\", 32); // No output\n</code></pre>"},{"location":"package/observable/#nested-object-and-array-observable","title":"Nested Object and array Observable","text":"<pre><code>import useObservable from \"observable-hooks\";\n\nconst person = { name: \"John\", age: 30, address: { city: \"New York\" } };\nconst observable = useObservable(person);\n\nconst unsubscribe = observable.subscribe((path, value) =&gt; {\n  console.log(`${path} changed to ${value}`);\n});\n\nobservable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"address.city\", \"San Francisco\"); // Output: \"address.city changed to San Francisco\"\nobservable.set([\"address\", \"zipCode\"], \"94101\"); // Output: \"address.zipCode changed to 94101\"\n\nunsubscribe();\n</code></pre>"},{"location":"package/queue/","title":"Queue","text":"<p>Queue Management provides a Queue class that helps you manage multiple concurrent tasks efficiently without blocking the main thread. It allows you to enqueue tasks, handle errors gracefully, track progress, and cancel all tasks if needed.</p> <p>The EventQueue module provides a flexible and event-driven way to manage tasks in a browser environment. By using this module, you can handle long-running operations, progress updates, error handling, and task cancellation in a clean and efficient manner.</p>"},{"location":"package/queue/#features","title":"Features","text":"<ul> <li>Enqueue Task: Enqueue tasks and execute them sequentially without blocking the main thread</li> <li>Handle errors: Handle errors for each task with custom error handling functions</li> <li>Track progress: Track progress for each task with custom progress handling functions</li> <li>Cancel all tasks: Cancel all tasks in the queue, including the currently running task</li> <li>Event-Driven: Utilizes the <code>EventTarget</code> interface for handling task-related events, making it flexible and decoupled from direct method calls.</li> <li>Task Enqueuing: Easily enqueue tasks with optional error and progress handlers.</li> <li>Progress Updates: Supports real-time progress updates for each task.</li> <li>Task Cancellation: Allows for cancellation of individual tasks or all tasks in the queue.</li> <li>Error Handling: Provides a mechanism to handle errors within tasks gracefully.</li> <li>Promise-Based: Uses Promises for task execution, making it easy to handle asynchronous operations.</li> <li>Compatibility: Designed to work in modern browsers with support for ES6 modules and the <code>EventTarget</code> interface.</li> </ul> <p>Note : Since this module is designed for a browser environment, ensure you have a way to include ES6 modules. You can use tools like Webpack, Parcel, or simply include it in a script tag if your browser supports ES6 modules natively.</p>"},{"location":"package/queue/#installation","title":"Installation","text":"<pre><code>  npm install gn-queue\n</code></pre>"},{"location":"package/queue/#usage-gn-queue","title":"Usage [gn-queue]","text":"<ol> <li>Create an instance of the <code>Queue</code> class:</li> </ol> <pre><code>const queue = new Queue();\n</code></pre> <ol> <li>Define your task functions. These functions should return a Promise and optionally accept <code>onProgress</code> and <code>signal</code> callbacks for progress tracking and task cancellation, respectively:</li> </ol> <pre><code>function apiRequest(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    // Your API request logic here\n    // Call onProgress with progress information\n    // Check signal.aborted to handle cancellation\n  });\n}\n\nfunction convertVideoToFrames(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    // Your video conversion logic here\n    // Call onProgress with progress information\n    // Check signal.aborted to handle cancellation\n  });\n}\n</code></pre> <ol> <li>Define error handling and progress handling functions (optional):</li> </ol> <pre><code>function handleApiRequestError(error) {\n  // Handle API request error\n}\n\nfunction handleVideoConversionError(error) {\n  // Handle video conversion error\n}\n\nfunction handleApiRequestProgress(progress) {\n  // Handle API request progress\n}\n\nfunction handleVideoConversionProgress(progress) {\n  // Handle video conversion progress\n}\n</code></pre> <ol> <li>Enqueue tasks with optional error handling and progress tracking functions:</li> </ol> <pre><code>queue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n</code></pre> <ol> <li>To cancel all tasks in the queue, including the currently running task, call the <code>cancelAllTasks</code> method:</li> </ol> <pre><code>queue.cancelAllTasks();\n</code></pre>"},{"location":"package/queue/#example","title":"Example","text":""},{"location":"package/queue/#basic-example","title":"Basic Example","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(\"API request completed\");\n      resolve();\n    }, 2000);\n  });\n}\n\nfunction convertVideoToFrames() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(\"Video converted to frames\");\n      resolve();\n    }, 5000);\n  });\n}\n\nqueue.enqueue(apiRequest);\nqueue.enqueue(convertVideoToFrames);\nqueue.enqueue(apiRequest);\nqueue.enqueue(convertVideoToFrames);\n</code></pre> <p>In this example, we enqueue two API request tasks and two video conversion tasks. The tasks will be executed sequentially without blocking the main thread.</p>"},{"location":"package/queue/#example-with-error-handling","title":"Example with Error Handling","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest() {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      const success = Math.random() &gt; 0.5;\n      if (success) {\n        console.log(\"API request completed\");\n        resolve();\n      } else {\n        reject(new Error(\"API request failed\"));\n      }\n    }, 2000);\n  });\n}\n\nfunction convertVideoToFrames() {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      const success = Math.random() &gt; 0.5;\n      if (success) {\n        console.log(\"Video converted to frames\");\n        resolve();\n      } else {\n        reject(new Error(\"Video conversion failed\"));\n      }\n    }, 5000);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError);\nqueue.enqueue(convertVideoToFrames, handleVideoConversionError);\nqueue.enqueue(apiRequest, handleApiRequestError);\nqueue.enqueue(convertVideoToFrames, handleVideoConversionError);\n</code></pre> <p>In this example, we define error handling functions for API requests and video conversions. If any task fails, the corresponding error handling function will be called with the error object.</p>"},{"location":"package/queue/#example-with-progress-tracking","title":"Example with Progress Tracking","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest(onProgress) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 5;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      currentStep++;\n      onProgress((currentStep / totalSteps) * 100);\n      if (currentStep === totalSteps) {\n        clearInterval(interval);\n        const success = Math.random() &gt; 0.5;\n        if (success) {\n          console.log(\"API request completed\");\n          resolve();\n        } else {\n          reject(new Error(\"API request failed\"));\n        }\n      }\n    }, 1000);\n  });\n}\n\nfunction convertVideoToFrames(onProgress) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 10;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      currentStep++;\n      onProgress((currentStep / totalSteps) * 100);\n      if (currentStep === totalSteps) {\n        clearInterval(interval);\n        const success = Math.random() &gt; 0.5;\n        if (success) {\n          console.log(\"Video converted to frames\");\n          resolve();\n        } else {\n          reject(new Error(\"Video conversion failed\"));\n        }\n      }\n    }, 500);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleApiRequestProgress(progress) {\n  console.log(`API request progress: ${progress}%`);\n}\n\nfunction handleVideoConversionProgress(progress) {\n  console.log(`Video conversion progress: ${progress}%`);\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n</code></pre> <p>In this example, we define progress handling functions for API requests and video conversions. The task functions call the <code>onProgress</code> callback periodically with the current progress value. The corresponding progress handling function will be called with the progress information, allowing you to update your user interface or perform any other actions based on the progress.</p>"},{"location":"package/queue/#example-with-task-cancellation","title":"Example with Task Cancellation","text":"<pre><code>const Queue = require(\"./queue\");\n\nconst queue = new Queue();\n\nfunction apiRequest(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 5;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new DOMException(\"AbortError\", \"Task has been canceled.\"));\n      } else {\n        currentStep++;\n        onProgress((currentStep / totalSteps) * 100);\n        if (currentStep === totalSteps) {\n          clearInterval(interval);\n          const success = Math.random() &gt; 0.5;\n          if (success) {\n            console.log(\"API request completed\");\n            resolve();\n          } else {\n            reject(new Error(\"API request failed\"));\n          }\n        }\n      }\n    }, 1000);\n  });\n}\n\nfunction convertVideoToFrames(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 10;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new DOMException(\"AbortError\", \"Task has been canceled.\"));\n      } else {\n        currentStep++;\n        onProgress((currentStep / totalSteps) * 100);\n        if (currentStep === totalSteps) {\n          clearInterval(interval);\n          const success = Math.random() &gt; 0.5;\n          if (success) {\n            console.log(\"Video converted to frames\");\n            resolve();\n          } else {\n            reject(new Error(\"Video conversion failed\"));\n          }\n        }\n      }\n    }, 500);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleApiRequestProgress(progress) {\n  console.log(`API request progress: ${progress}%`);\n}\n\nfunction handleVideoConversionProgress(progress) {\n  console.log(`Video conversion progress: ${progress}%`);\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n\n// Cancel all tasks after 5 seconds\nsetTimeout(() =&gt; {\n  queue.cancelAllTasks();\n}, 5000);\n</code></pre> <p>n this example, we've updated the apiRequest and convertVideoToFrames functions to accept a signal argument. This signal is used to check if the task has been canceled (signal.aborted). If the task is canceled, we clear the interval and reject the Promise with a DOMException of type AbortError. Additionally, we've added a setTimeout function that calls queue.cancelAllTasks() after 5 seconds. This will cancel all tasks in the queue, including the currently running task. When you run this code, you'll see that tasks start executing, and after 5 seconds, all tasks are canceled. The output might look something like this:</p>"},{"location":"package/queue/#usage-gn-queue-eventqueue","title":"Usage [gn-queue (EventQueue)]","text":""},{"location":"package/queue/#importing-eventqueue","title":"Importing EventQueue","text":"<pre><code>import { EventQueue } from \"gn-queue\";\n</code></pre> <p>Creating an EventQueue Instance</p> <pre><code>const queue = new EventQueue();\n</code></pre> <p>Enqueuing Tasks</p> <p>Tasks can be enqueued with optional error and progress handlers.</p> <pre><code>const task = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 10;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  task,\n  (error) =&gt; console.error(\"Task failed:\", error),\n  (progress) =&gt; console.log(\"Task progress:\", progress)\n);\n</code></pre> <p>Cancelling All Tasks</p> <p>You can cancel all tasks in the queue:</p> <pre><code>queue.cancelAllTasks();\n</code></pre>"},{"location":"package/queue/#examples","title":"Examples","text":"<p>Simple Counter Task</p> <pre><code>const simpleCounterTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let count = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        count += 10;\n        progressCallback(count);\n        if (count &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Simple Counter Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  simpleCounterTask,\n  (error) =&gt; console.error(\"Simple Counter Task failed:\", error),\n  (progress) =&gt; console.log(\"Simple Counter Task progress:\", progress)\n);\n</code></pre> <p>Network Request Simulation</p> <pre><code>const networkRequestTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (signal.aborted) {\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progressCallback(100);\n        resolve(\"Network Request Task completed\");\n      }\n    }, 2000);\n  });\n};\n\nqueue.enqueue(\n  networkRequestTask,\n  (error) =&gt; console.error(\"Network Request Task failed:\", error),\n  (progress) =&gt; console.log(\"Network Request Task progress:\", progress)\n);\n</code></pre> <p>File Upload Simulation</p> <pre><code>const fileUploadTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 20;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"File Upload Task completed\");\n        }\n      }\n    }, 500);\n  });\n};\n\nqueue.enqueue(\n  fileUploadTask,\n  (error) =&gt; console.error(\"File Upload Task failed:\", error),\n  (progress) =&gt; console.log(\"File Upload Task progress:\", progress)\n);\n</code></pre> <p>Task with Error Handling</p> <pre><code>const errorHandlingTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (signal.aborted) {\n        reject(new Error(\"Task aborted\"));\n      } else {\n        reject(new Error(\"Task failed due to an error\"));\n      }\n    }, 1000);\n  });\n};\n\nqueue.enqueue(\n  errorHandlingTask,\n  (error) =&gt; console.error(\"Error Handling Task failed:\", error),\n  (progress) =&gt; console.log(\"Error Handling Task progress:\", progress)\n);\n</code></pre> <p>Task Cancellation</p> <pre><code>const cancellationTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 10;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Cancellation Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  cancellationTask,\n  (error) =&gt; console.error(\"Cancellation Task failed:\", error),\n  (progress) =&gt; console.log(\"Cancellation Task progress:\", progress)\n);\n</code></pre> <p>Cancelling All Tasks After a Delay</p> <pre><code>setTimeout(() =&gt; {\n  queue.cancelAllTasks();\n}, 3000);\n</code></pre>"},{"location":"web_development/","title":"Web Development","text":""},{"location":"web_development/#frontend-development","title":"Frontend Development \ud83c\udf10","text":"<p>The frontend development section is all about building the client-side of web applications. It covers everything needed to create interactive and visually appealing user interfaces:</p> <ul> <li>HTML: The structure and foundation of web pages.</li> <li>CSS: Styling and layout techniques, including modern concepts like Flexbox, Grid, and responsive design.</li> <li>JavaScript: The logic and interactivity of web applications, covering ES6+ features, DOM manipulation, event handling, and more.</li> <li>Frameworks &amp; Libraries: Focus on popular tools like React, Vue, or Angular, which streamline building scalable and dynamic user interfaces.</li> <li>UI/UX Principles: Concepts of designing user-friendly and visually consistent interfaces, including typography, color theory, and accessibility.</li> <li>Performance Optimization: Techniques to enhance the loading speed, responsiveness, and overall user experience of web applications.</li> </ul> <p>This section contains practical exercises, code snippets, and mini-projects that demonstrate how to create interactive, responsive, and modern frontend applications.</p>"},{"location":"web_development/#backend-development","title":"Backend Development \ud83d\udd27","text":"<p>The backend development section focuses on building the server-side logic that powers web applications. It involves the following key concepts and technologies:</p> <ul> <li>Server-Side Programming: Writing and managing the logic behind web applications using languages and frameworks like Node.js and Express.</li> <li>APIs and RESTful Services: Designing and implementing APIs that allow communication between the frontend and backend, as well as integrating third-party services.</li> <li>Database Management: Working with relational databases (like PostgreSQL and MySQL) and NoSQL databases (like MongoDB), covering data modeling, querying, and optimizing storage.</li> <li>Authentication &amp; Authorization: Implementing secure login systems, managing user roles, and protecting routes with strategies like JWT and OAuth.</li> <li>Deployment &amp; Scaling: Deploying applications to platforms like Heroku, Vercel, or AWS, and understanding concepts like serverless architecture, load balancing, and scaling applications.</li> </ul> <p>This section includes backend-focused projects, API implementations, and best practices for designing secure, scalable, and maintainable server-side applications.</p>"}]}