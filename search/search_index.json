{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Self-Learning Journey \ud83d\udcd8\u00b6","text":"<p>Welcome to my self-learning GitHub repository! This repo documents my journey of continuous learning and growth in various fields, including programming, algorithms, data structures, artificial intelligence, web development, and more.</p>"},{"location":"#table-of-contents","title":"Table of Contents\u00b6","text":"<ul> <li>Overview</li> <li>Goals</li> <li>Learning Topics</li> <li>Project Structure</li> <li>Resources</li> <li>How to Use this Repo</li> <li>Future Plans</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"#overview","title":"Overview\u00b6","text":"<p>This repository serves as a collection of the exercises, notes, projects, and code snippets I\u2019ve worked on while learning various concepts and technologies. It\u2019s a living document that grows as I dive deeper into new topics and revisit previously learned material.</p>"},{"location":"#goals","title":"Goals\u00b6","text":"<ol> <li>Build a solid foundation in key programming concepts.</li> <li>Solve algorithmic problems to improve problem-solving skills.</li> <li>Develop hands-on projects to apply theoretical knowledge.</li> <li>Explore advanced topics such as AI, computer vision, and data science.</li> <li>Document my learning process and progress for future reference.</li> </ol>"},{"location":"#learning-topics","title":"Learning Topics\u00b6","text":"<p>Some of the key areas covered in this repo: - Programming Languages: JavaScript, Python, etc. - Algorithms and Data Structures: Arrays, Strings, Sliding Window, Dynamic Programming, etc. - Web Development: HTML, CSS, JavaScript, Frontend Frameworks, Backend Development, etc. - Artificial Intelligence: Machine Learning, Deep Learning, Computer Vision, etc. - Projects: Full-stack applications, data analysis tools, AI models, etc.</p>"},{"location":"#project-structure","title":"Project Structure\u00b6","text":"<p>The repository is organized as follows:</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation-platform.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 github-jekyl.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.sh\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirement.txt\n</code></pre> <p>Each folder contains relevant code snippets, problem solutions, and notes.</p>"},{"location":"#resources","title":"Resources\u00b6","text":"<p>Here are some of the resources I frequently refer to during my learning: - Books: [Insert book titles] - Online Courses: [Insert course links] - Websites: [Insert websites/blogs] - YouTube Channels: [Insert channels]</p>"},{"location":"#how-to-use-this-repo","title":"How to Use this Repo\u00b6","text":"<ul> <li>Browse through the folders based on topics of interest.</li> <li>Check out the projects folder for hands-on implementations.</li> <li>Refer to the notes folder for detailed explanations and documentation.</li> <li>Feel free to clone the repository and use it for your own learning!</li> </ul>"},{"location":"#future-plans","title":"Future Plans\u00b6","text":"<ul> <li>Dive deeper into advanced data structures and algorithms.</li> <li>Build more full-stack projects.</li> <li>Experiment with AI-based solutions in real-world applications.</li> <li>Expand the repository to include collaborative learning initiatives.</li> </ul>"},{"location":"#contributing","title":"Contributing\u00b6","text":"<p>This repository is primarily for personal learning, but contributions are welcome! If you find a better solution, have suggestions, or want to share your own learning path, feel free to submit a pull request.</p>"},{"location":"#license","title":"License\u00b6","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"example/","title":"Welcome to Practice\u00b6","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"example/#commands","title":"Commands\u00b6","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> init.py<pre><code>def add (a,b):\n  return a + b\n</code></pre>"},{"location":"example/#project-layout","title":"Project layout\u00b6","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"example/#code","title":"Code\u00b6","text":"<pre><code>def sort():\n    return pass\n</code></pre>"},{"location":"github-jekyl/","title":"Github Pages using Jekyll\u00b6","text":""},{"location":"github-jekyl/#getting-started","title":"Getting Started\u00b6","text":""},{"location":"github-jekyl/#step-1-installation-of-ruby-with-ruby-environmet-manager-similar-to-nvm","title":"Step 1 [Installation of ruby with ruby environmet manager similar to nvm]\u00b6","text":"<ol> <li>Updating package manager and installing essential tools from apt</li> </ol> <pre><code>sudo apt update\nsudo apt install -y curl gpg build-essential libffi-dev libyaml-dev libssl-dev libgdbm-dev libncurses5-dev libsqlite3-dev\n</code></pre> <ol> <li>Install rbenv and Ruby-build:</li> </ol> <pre><code>curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-installer | bash\n</code></pre> <ol> <li>Add rbenv to your shell:</li> </ol> <pre><code>echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <ol> <li>Install Ruby:</li> </ol> <pre><code>rbenv install 3.2.0  # Or any latest version\nrbenv global 3.2.0\n</code></pre>"},{"location":"github-jekyl/#step-2-install-bundler-and-jekyll","title":"Step 2 [Install Bundler and Jekyll]\u00b6","text":"<pre><code>gem install bundler jekyll\n</code></pre>"},{"location":"github-jekyl/#step-3-create-a-repository","title":"Step 3 [Create a repository]\u00b6","text":"<ol> <li>Goto to your github and create new repo with <code>your_user_name</code> as repo name.</li> </ol> <p>Note : This repo considered as you profile repo, so no need to setup github workflow. Github automatically do it for you. Even though you can configured by your own as well.</p> <ol> <li> <p>Create file <code>_config.yml</code></p> </li> <li> <p>Add these lines</p> </li> </ol> <pre><code>title: Niraj Kumar Sah # Your user_name\nlogo: ./images/niraj.png # Logo image path\ndescription: Software Engineer @Mapmyindia # Description text\nshow_downloads: true # Tells you download option of your page (tar| zip) format\ntheme: jekyll-theme-minimal # here you can choose theme of your choices\n</code></pre> <p>Note : Image path should be there, If not create directory <code>images</code> and put image <code>name.png</code>.</p> <ol> <li>Create a <code>README.md</code> Add Profile Information</li> </ol>"},{"location":"github-jekyl/#step-4-configure-jekyll","title":"Step 4 Configure jekyll\u00b6","text":"<ol> <li> <p>Create <code>Gemfile</code></p> </li> <li> <p>Add the following dependencies</p> </li> </ol> <pre><code>source \"https://rubygems.org\"\n\ngem \"jekyll\", \"~&gt; 3.9.5\"\ngem \"github-pages\", group: :jekyll_plugins\ngem \"webrick\"  # Add this line\n</code></pre>"},{"location":"github-jekyl/#step-5-build-and-deploy","title":"Step 5 [Build and deploy]\u00b6","text":"<ol> <li>Install related dependencies</li> </ol> <pre><code>bundle install\n</code></pre> <ol> <li>Build and serve</li> </ol> <pre><code>bundle exec jekyll serve\n</code></pre> <p>You have successfulluy serve your profile page at <code>https://localhost:4000</code></p>"},{"location":"health/","title":"Health Insurance Precautions and Measures\u00b6","text":"<p>Policy should includes following </p> <ol> <li> <p>Waiting period clause    The waiting clause in a health insurance policy refers to the period of time that must pass before certain benefits can be claimed. During this waiting period, the policyholder is not eligible to receive coverage for specific medical conditions or treatments. The duration of the waiting period varies depending on the insurance provider and the policy terms. It is important to carefully review the waiting clause in your health insurance policy to understand the specific conditions and timeframes involved.   Needs to be less in policy</p> </li> <li> <p>No claim bonus   A no-claim bonus is a discount or benefit offered by health insurance providers to policyholders who do not make any claims during a specified period. This incentive encourages policyholders to maintain a healthy lifestyle and avoid unnecessary medical expenses. The no-claim bonus can result in reduced premiums, increased coverage limits, or other benefits for policyholders who demonstrate good health and avoid making claims. It is important to inquire about the no-claim bonus policy when purchasing health insurance to take advantage of potential discounts and benefits.   needs to be more in policy.</p> </li> <li> <p>Pre-existing diseases   Pre-existing diseases are medical conditions that a policyholder has been diagnosed with before purchasing a health insurance policy. These conditions are typically excluded from coverage under standard health insurance policies, as they are considered high-risk and may require specialized treatment. Policyholders with pre-existing diseases may be required to pay higher premiums, undergo medical underwriting, or purchase additional coverage to receive benefits for these conditions. It is important to disclose any pre-existing diseases when applying for health insurance to ensure accurate coverage and avoid claim denials.   Needs to be less in policy</p> </li> <li> <p>Co-payment clause   A co-payment clause in a health insurance policy requires the policyholder to pay a percentage of the medical expenses out of pocket, while the insurance provider covers the remaining costs. This cost-sharing arrangement helps reduce the financial burden on the insurance company and encourages policyholders to make cost-effective healthcare decisions. The co-payment percentage and limits vary depending on the policy terms and coverage options selected. It is important to understand the co-payment clause in your health insurance policy to budget for potential out-of-pocket expenses and avoid unexpected costs.   Needs to be less in policy</p> </li> <li> <p>Pre-hospitalization and post-hospitalization expenses   Pre-hospitalization and post-hospitalization expenses are medical costs incurred before and after a hospital stay for treatment. These expenses may include diagnostic tests, consultations, medications, rehabilitation, and other services related to the medical condition. Health insurance policies typically cover pre-hospitalization and post-hospitalization expenses up to a specified limit or time frame. It is important to review the coverage limits and terms for pre-hospitalization and post-hospitalization expenses in your health insurance policy to ensure comprehensive coverage and avoid unexpected costs.   Needs to be more in policy</p> </li> <li> <p>Family floater policy   A family floater policy is a type of health insurance plan that covers multiple family members under a single policy. This policy provides coverage for the entire family, including the policyholder, spouse, children, and dependent parents. Family floater policies offer shared coverage limits and benefits for all insured members, making it a cost-effective option for families with multiple dependents. It is important to consider the coverage limits, premium costs, and benefits of a family floater policy when selecting health insurance for your family to ensure comprehensive coverage and affordability.   Needs to be more in policy.</p> </li> <li> <p>Maximum entry and renewal age   The maximum entry and renewal age in a health insurance policy refer to the age limits for enrolling in or renewing coverage under the policy. These age limits vary depending on the insurance provider and the policy terms, with some policies offering coverage for individuals of all ages. It is important to review the maximum entry and renewal age limits in your health insurance policy to ensure eligibility for coverage and avoid coverage gaps due to age restrictions.   Needs to be more in policy</p> </li> <li> <p>Disease coverage   Disease coverage in a health insurance policy refers to the specific medical conditions and treatments that are covered under the policy. Health insurance policies typically provide coverage for a wide range of diseases, including common illnesses, chronic conditions, and critical illnesses. The coverage limits, exclusions, and benefits for disease coverage vary depending on the policy terms and coverage options selected. It is important to review the disease coverage in your health insurance policy to ensure comprehensive coverage for your medical needs and avoid claim denials for excluded conditions.   Needs to be more in policy</p> </li> <li> <p>caping on individual caping   Caping on individual caping is the maximum limit of coverage that an individual policyholder can claim under a health insurance policy. This caping helps prevent excessive claims and ensures that the insurance provider can manage financial risks effectively. The caping on individual caping varies depending on the policy terms, coverage options, and the insurance provider. It is important to review the caping on individual caping in your health insurance policy to understand the coverage limits and avoid claim denials for exceeding the maximum limits.   Needs to be more in policy</p> </li> <li> <p>Network hospitals   Network hospitals are healthcare facilities that have a tie-up with health insurance providers to offer cashless treatment and services to policyholders. These hospitals have agreements with insurance companies to provide medical care to insured individuals without requiring upfront payments or reimbursement claims. Policyholders can avail of cashless treatment at network hospitals for covered medical conditions, reducing out-of-pocket expenses and administrative hassles. It is important to inquire about the network hospitals associated with your health insurance policy to access quality healthcare services and benefits conveniently.   Needs to be more in policy</p> </li> <li> <p>wide network of cashless claim settlement   Wide network of cashless claim settlement refers to the extensive coverage of healthcare facilities and services that accept cashless claims under a health insurance policy. These facilities include hospitals, clinics, diagnostic centers, pharmacies, and other medical providers that have agreements with insurance companies to offer cashless treatment to policyholders. The wide network of cashless claim settlement ensures that insured individuals can access quality healthcare services and benefits conveniently without incurring out-of-pocket expenses or reimbursement claims. It is important to review the network of cashless claim settlement in your health insurance policy to ensure comprehensive coverage and easy access to medical care when needed.   Needs to be more in policy</p> </li> <li></li> </ol>"},{"location":"computer_vision/","title":"Computer Vision\u00b6","text":""},{"location":"computer_vision/#computer-vision_1","title":"Computer Vision \ud83d\uddbc\ufe0f\u00b6","text":"<p>The computer vision section explores techniques and technologies for enabling machines to interpret and understand visual information from the world. This area involves:</p> <ul> <li>Image Processing: Techniques for manipulating and analyzing images, including filtering, transformation, and feature extraction.</li> <li>Object Detection &amp; Recognition: Methods for identifying and locating objects within images or video streams, utilizing algorithms like YOLO, SSD, and Faster R-CNN.</li> <li>Image Classification: Using machine learning models to classify images into categories, with frameworks like TensorFlow and PyTorch.</li> <li>Feature Matching: Techniques for finding corresponding features between images, useful in applications like panorama stitching and 3D reconstruction.</li> <li>Deep Learning for Vision: Leveraging convolutional neural networks (CNNs) and other deep learning architectures to tackle complex vision tasks.</li> <li>Applications: Practical uses of computer vision in areas like augmented reality, facial recognition, autonomous vehicles, and medical imaging.</li> </ul> <p>This section includes hands-on projects, code implementations, and research papers that demonstrate the application of computer vision techniques in real-world scenarios.</p>"},{"location":"package/observable/","title":"Observable Hooks\u00b6","text":"<p>Observable Module This is a lightweight and reusable Observable module inspired by React hooks. It provides a simple way to observe changes to an object's properties and subscribe to those changes using callback functions.</p> <p>Installations</p> <p>To use this module, simply import the <code>useObservable</code> function from the <code>observable-hooks</code> file:</p> <pre><code>import useObservable from \"observable-hooks\";\n</code></pre> <p>Usage</p> <ol> <li>Create an observable object:</li> </ol> <pre><code>const person = { name: \"John\", age: 30 };\nconst observable = useObservable(person);\n</code></pre> <ol> <li>Subscribe to changes:</li> </ol> <pre><code>const unsubscribe = observable.subscribe((prop, value) =&gt; {\n  console.log(`${prop} changed to ${value}`);\n});\n</code></pre> <ol> <li>Update properties:</li> </ol> <pre><code>observable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"name\", \"Jane\"); // Output: \"name changed to Jane\"\n</code></pre> <ol> <li>Unsubscribe from changes (optional):</li> </ol> <pre><code>unsubscribe();\n</code></pre> <p>API <code>useObservable(obj)</code></p> <p><code>obj (Object)</code>: The object to be observed. Returns an object with the following methods:</p> <p><code>subscribe(callback)</code></p> <p><code>callback (Function)</code>: The function to be called when a property changes. It receives two arguments: prop (the property name) and value (the new value).</p> <p><code>unsubscribe(callback)</code></p> <p><code>callback (Function)</code>: The function to be unsubscribed from property changes.</p> <p><code>set(prop, value)</code></p> <p><code>prop (string)</code>: The property name to update. <code>value (any)</code>: The new value for the property.</p> <p><code>get(prop)</code></p> <p><code>prop (string)</code>: The property name to retrieve. Returns the current value of the property.</p>"},{"location":"package/observable/#simple-object-and-array-observable","title":"Simple Object and array Observable\u00b6","text":"<pre><code>import useObservable from \"observable-hooks\";\n\nconst person = { name: \"John\", age: 30 };\nconst observable = useObservable(person);\n\nconst unsubscribe = observable.subscribe((prop, value) =&gt; {\n  console.log(`${prop} changed to ${value}`);\n});\n\nobservable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"name\", \"Jane\"); // Output: \"name changed to Jane\"\n\nunsubscribe();\n\nobservable.set(\"age\", 32); // No output\n</code></pre>"},{"location":"package/observable/#nested-object-and-array-observable","title":"Nested Object and array Observable\u00b6","text":"<pre><code>import useObservable from \"observable-hooks\";\n\nconst person = { name: \"John\", age: 30, address: { city: \"New York\" } };\nconst observable = useObservable(person);\n\nconst unsubscribe = observable.subscribe((path, value) =&gt; {\n  console.log(`${path} changed to ${value}`);\n});\n\nobservable.set(\"age\", 31); // Output: \"age changed to 31\"\nobservable.set(\"address.city\", \"San Francisco\"); // Output: \"address.city changed to San Francisco\"\nobservable.set([\"address\", \"zipCode\"], \"94101\"); // Output: \"address.zipCode changed to 94101\"\n\nunsubscribe();\n</code></pre>"},{"location":"package/queue/","title":"Queue\u00b6","text":"<p>Queue Management provides a Queue class that helps you manage multiple concurrent tasks efficiently without blocking the main thread. It allows you to enqueue tasks, handle errors gracefully, track progress, and cancel all tasks if needed.</p> <p>The EventQueue module provides a flexible and event-driven way to manage tasks in a browser environment. By using this module, you can handle long-running operations, progress updates, error handling, and task cancellation in a clean and efficient manner.</p>"},{"location":"package/queue/#features","title":"Features\u00b6","text":"<ul> <li>Enqueue Task: Enqueue tasks and execute them sequentially without blocking the main thread</li> <li>Handle errors: Handle errors for each task with custom error handling functions</li> <li>Track progress: Track progress for each task with custom progress handling functions</li> <li>Cancel all tasks: Cancel all tasks in the queue, including the currently running task</li> <li>Event-Driven: Utilizes the <code>EventTarget</code> interface for handling task-related events, making it flexible and decoupled from direct method calls.</li> <li>Task Enqueuing: Easily enqueue tasks with optional error and progress handlers.</li> <li>Progress Updates: Supports real-time progress updates for each task.</li> <li>Task Cancellation: Allows for cancellation of individual tasks or all tasks in the queue.</li> <li>Error Handling: Provides a mechanism to handle errors within tasks gracefully.</li> <li>Promise-Based: Uses Promises for task execution, making it easy to handle asynchronous operations.</li> <li>Compatibility: Designed to work in modern browsers with support for ES6 modules and the <code>EventTarget</code> interface.</li> </ul> <p>Note : Since this module is designed for a browser environment, ensure you have a way to include ES6 modules. You can use tools like Webpack, Parcel, or simply include it in a script tag if your browser supports ES6 modules natively.</p>"},{"location":"package/queue/#installation","title":"Installation\u00b6","text":"<pre><code>  npm install gn-queue\n</code></pre>"},{"location":"package/queue/#usage-gn-queue","title":"Usage [gn-queue]\u00b6","text":"<ol> <li>Create an instance of the <code>Queue</code> class:</li> </ol> <pre><code>const queue = new Queue();\n</code></pre> <ol> <li>Define your task functions. These functions should return a Promise and optionally accept <code>onProgress</code> and <code>signal</code> callbacks for progress tracking and task cancellation, respectively:</li> </ol> <pre><code>function apiRequest(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    // Your API request logic here\n    // Call onProgress with progress information\n    // Check signal.aborted to handle cancellation\n  });\n}\n\nfunction convertVideoToFrames(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    // Your video conversion logic here\n    // Call onProgress with progress information\n    // Check signal.aborted to handle cancellation\n  });\n}\n</code></pre> <ol> <li>Define error handling and progress handling functions (optional):</li> </ol> <pre><code>function handleApiRequestError(error) {\n  // Handle API request error\n}\n\nfunction handleVideoConversionError(error) {\n  // Handle video conversion error\n}\n\nfunction handleApiRequestProgress(progress) {\n  // Handle API request progress\n}\n\nfunction handleVideoConversionProgress(progress) {\n  // Handle video conversion progress\n}\n</code></pre> <ol> <li>Enqueue tasks with optional error handling and progress tracking functions:</li> </ol> <pre><code>queue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n</code></pre> <ol> <li>To cancel all tasks in the queue, including the currently running task, call the <code>cancelAllTasks</code> method:</li> </ol> <pre><code>queue.cancelAllTasks();\n</code></pre>"},{"location":"package/queue/#example","title":"Example\u00b6","text":""},{"location":"package/queue/#basic-example","title":"Basic Example\u00b6","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(\"API request completed\");\n      resolve();\n    }, 2000);\n  });\n}\n\nfunction convertVideoToFrames() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(\"Video converted to frames\");\n      resolve();\n    }, 5000);\n  });\n}\n\nqueue.enqueue(apiRequest);\nqueue.enqueue(convertVideoToFrames);\nqueue.enqueue(apiRequest);\nqueue.enqueue(convertVideoToFrames);\n</code></pre> <p>In this example, we enqueue two API request tasks and two video conversion tasks. The tasks will be executed sequentially without blocking the main thread.</p>"},{"location":"package/queue/#example-with-error-handling","title":"Example with Error Handling\u00b6","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest() {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      const success = Math.random() &gt; 0.5;\n      if (success) {\n        console.log(\"API request completed\");\n        resolve();\n      } else {\n        reject(new Error(\"API request failed\"));\n      }\n    }, 2000);\n  });\n}\n\nfunction convertVideoToFrames() {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      const success = Math.random() &gt; 0.5;\n      if (success) {\n        console.log(\"Video converted to frames\");\n        resolve();\n      } else {\n        reject(new Error(\"Video conversion failed\"));\n      }\n    }, 5000);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError);\nqueue.enqueue(convertVideoToFrames, handleVideoConversionError);\nqueue.enqueue(apiRequest, handleApiRequestError);\nqueue.enqueue(convertVideoToFrames, handleVideoConversionError);\n</code></pre> <p>In this example, we define error handling functions for API requests and video conversions. If any task fails, the corresponding error handling function will be called with the error object.</p>"},{"location":"package/queue/#example-with-progress-tracking","title":"Example with Progress Tracking\u00b6","text":"<pre><code>import { Queue } from \"gn-queue\";\n\nconst queue = new Queue();\n\nfunction apiRequest(onProgress) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 5;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      currentStep++;\n      onProgress((currentStep / totalSteps) * 100);\n      if (currentStep === totalSteps) {\n        clearInterval(interval);\n        const success = Math.random() &gt; 0.5;\n        if (success) {\n          console.log(\"API request completed\");\n          resolve();\n        } else {\n          reject(new Error(\"API request failed\"));\n        }\n      }\n    }, 1000);\n  });\n}\n\nfunction convertVideoToFrames(onProgress) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 10;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      currentStep++;\n      onProgress((currentStep / totalSteps) * 100);\n      if (currentStep === totalSteps) {\n        clearInterval(interval);\n        const success = Math.random() &gt; 0.5;\n        if (success) {\n          console.log(\"Video converted to frames\");\n          resolve();\n        } else {\n          reject(new Error(\"Video conversion failed\"));\n        }\n      }\n    }, 500);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleApiRequestProgress(progress) {\n  console.log(`API request progress: ${progress}%`);\n}\n\nfunction handleVideoConversionProgress(progress) {\n  console.log(`Video conversion progress: ${progress}%`);\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n</code></pre> <p>In this example, we define progress handling functions for API requests and video conversions. The task functions call the <code>onProgress</code> callback periodically with the current progress value. The corresponding progress handling function will be called with the progress information, allowing you to update your user interface or perform any other actions based on the progress.</p>"},{"location":"package/queue/#example-with-task-cancellation","title":"Example with Task Cancellation\u00b6","text":"<pre><code>const Queue = require(\"./queue\");\n\nconst queue = new Queue();\n\nfunction apiRequest(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 5;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new DOMException(\"AbortError\", \"Task has been canceled.\"));\n      } else {\n        currentStep++;\n        onProgress((currentStep / totalSteps) * 100);\n        if (currentStep === totalSteps) {\n          clearInterval(interval);\n          const success = Math.random() &gt; 0.5;\n          if (success) {\n            console.log(\"API request completed\");\n            resolve();\n          } else {\n            reject(new Error(\"API request failed\"));\n          }\n        }\n      }\n    }, 1000);\n  });\n}\n\nfunction convertVideoToFrames(onProgress, signal) {\n  return new Promise((resolve, reject) =&gt; {\n    const totalSteps = 10;\n    let currentStep = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new DOMException(\"AbortError\", \"Task has been canceled.\"));\n      } else {\n        currentStep++;\n        onProgress((currentStep / totalSteps) * 100);\n        if (currentStep === totalSteps) {\n          clearInterval(interval);\n          const success = Math.random() &gt; 0.5;\n          if (success) {\n            console.log(\"Video converted to frames\");\n            resolve();\n          } else {\n            reject(new Error(\"Video conversion failed\"));\n          }\n        }\n      }\n    }, 500);\n  });\n}\n\nfunction handleApiRequestError(error) {\n  console.error(\"API request error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleVideoConversionError(error) {\n  console.error(\"Video conversion error:\", error);\n  // Implement your error handling logic here\n}\n\nfunction handleApiRequestProgress(progress) {\n  console.log(`API request progress: ${progress}%`);\n}\n\nfunction handleVideoConversionProgress(progress) {\n  console.log(`Video conversion progress: ${progress}%`);\n}\n\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\nqueue.enqueue(apiRequest, handleApiRequestError, handleApiRequestProgress);\nqueue.enqueue(\n  convertVideoToFrames,\n  handleVideoConversionError,\n  handleVideoConversionProgress\n);\n\n// Cancel all tasks after 5 seconds\nsetTimeout(() =&gt; {\n  queue.cancelAllTasks();\n}, 5000);\n</code></pre> <p>n this example, we've updated the apiRequest and convertVideoToFrames functions to accept a signal argument. This signal is used to check if the task has been canceled (signal.aborted). If the task is canceled, we clear the interval and reject the Promise with a DOMException of type AbortError. Additionally, we've added a setTimeout function that calls queue.cancelAllTasks() after 5 seconds. This will cancel all tasks in the queue, including the currently running task. When you run this code, you'll see that tasks start executing, and after 5 seconds, all tasks are canceled. The output might look something like this:</p>"},{"location":"package/queue/#usage-gn-queue-eventqueue","title":"Usage [gn-queue (EventQueue)]\u00b6","text":""},{"location":"package/queue/#importing-eventqueue","title":"Importing EventQueue\u00b6","text":"<pre><code>import { EventQueue } from \"gn-queue\";\n</code></pre> <p>Creating an EventQueue Instance</p> <pre><code>const queue = new EventQueue();\n</code></pre> <p>Enqueuing Tasks</p> <p>Tasks can be enqueued with optional error and progress handlers.</p> <pre><code>const task = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 10;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  task,\n  (error) =&gt; console.error(\"Task failed:\", error),\n  (progress) =&gt; console.log(\"Task progress:\", progress)\n);\n</code></pre> <p>Cancelling All Tasks</p> <p>You can cancel all tasks in the queue:</p> <pre><code>queue.cancelAllTasks();\n</code></pre>"},{"location":"package/queue/#examples","title":"Examples\u00b6","text":"<p>Simple Counter Task</p> <pre><code>const simpleCounterTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let count = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        count += 10;\n        progressCallback(count);\n        if (count &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Simple Counter Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  simpleCounterTask,\n  (error) =&gt; console.error(\"Simple Counter Task failed:\", error),\n  (progress) =&gt; console.log(\"Simple Counter Task progress:\", progress)\n);\n</code></pre> <p>Network Request Simulation</p> <pre><code>const networkRequestTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (signal.aborted) {\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progressCallback(100);\n        resolve(\"Network Request Task completed\");\n      }\n    }, 2000);\n  });\n};\n\nqueue.enqueue(\n  networkRequestTask,\n  (error) =&gt; console.error(\"Network Request Task failed:\", error),\n  (progress) =&gt; console.log(\"Network Request Task progress:\", progress)\n);\n</code></pre> <p>File Upload Simulation</p> <pre><code>const fileUploadTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 20;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"File Upload Task completed\");\n        }\n      }\n    }, 500);\n  });\n};\n\nqueue.enqueue(\n  fileUploadTask,\n  (error) =&gt; console.error(\"File Upload Task failed:\", error),\n  (progress) =&gt; console.log(\"File Upload Task progress:\", progress)\n);\n</code></pre> <p>Task with Error Handling</p> <pre><code>const errorHandlingTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (signal.aborted) {\n        reject(new Error(\"Task aborted\"));\n      } else {\n        reject(new Error(\"Task failed due to an error\"));\n      }\n    }, 1000);\n  });\n};\n\nqueue.enqueue(\n  errorHandlingTask,\n  (error) =&gt; console.error(\"Error Handling Task failed:\", error),\n  (progress) =&gt; console.log(\"Error Handling Task progress:\", progress)\n);\n</code></pre> <p>Task Cancellation</p> <pre><code>const cancellationTask = (progressCallback, signal) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let progress = 0;\n    const interval = setInterval(() =&gt; {\n      if (signal.aborted) {\n        clearInterval(interval);\n        reject(new Error(\"Task aborted\"));\n      } else {\n        progress += 10;\n        progressCallback(progress);\n        if (progress &gt;= 100) {\n          clearInterval(interval);\n          resolve(\"Cancellation Task completed\");\n        }\n      }\n    }, 100);\n  });\n};\n\nqueue.enqueue(\n  cancellationTask,\n  (error) =&gt; console.error(\"Cancellation Task failed:\", error),\n  (progress) =&gt; console.log(\"Cancellation Task progress:\", progress)\n);\n</code></pre> <p>Cancelling All Tasks After a Delay</p> <pre><code>setTimeout(() =&gt; {\n  queue.cancelAllTasks();\n}, 3000);\n</code></pre>"},{"location":"python_stack/RAG_part1/","title":"PART 1: How RAG application works\u00b6","text":""},{"location":"python_stack/RAG_part1/#introduction","title":"Introduction\u00b6","text":"<p>This is the first post of a complete series of posts that will cover every bits and pieces of RAG internals. We will mostly focus on intuitive understanding of technologies and concepts used in RAG. We will also cover the architecture and design of RAG in detail.</p> <p>Before doing anythings, the very obvious question that comes to our mind is what is RAG?. Why it is more popular now a days?.</p> <p>So to begin with let's first understand what is RAG.</p>"},{"location":"python_stack/RAG_part1/#what-is-ragretrieval-augmented-generation","title":"What is RAG(Retrieval Augmented Generation) ?\u00b6","text":"<p>RAG is a technique for augmenting LLM knowledge with additional data.</p> <p>LLMs can reason about wide-ranging topics, but their knowledge is limited to the public data up to a specific point in time that they were trained on. If you want to build AI applications that can reason about private data or data introduced after a model's cutoff date, you need to augment the knowledge of the model with the specific information it needs. The process of bringing the appropriate information and inserting it into the model prompt is known as Retrieval Augmented Generation (RAG).</p> <p>RAG is a technique for augmenting LLM knowledge with additional data. It is a combination of two models: a retriever and a generator. The retriever is responsible for finding relevant information from a large corpus of documents, while the generator is responsible for generating the final output.</p>"},{"location":"python_stack/RAG_part1/#how-rag-works","title":"How RAG works?\u00b6","text":"<p>RAG works by first retrieving relevant information from a large corpus of documents using a retriever model. The retriever model is trained to find the most relevant information given a query. Once the relevant information is retrieved, it is passed to a generator model, which generates the final output.</p> <p>If this make no sense to you, don't worry. We will go step by step and understand each component of RAG in detail.</p> <p>Let's take an example to understand it visually. If you are a developer you might have used chatgpt, gemini, anthropic, copilot or any other LLM model. These models are trained on large corpus of data and can generate human like text. But what if you want to generate text based on some specific data that is not present in the training data of these models. This is where RAG comes into picture. RAG can be used to augment the knowledge of these models with additional data.</p> <p></p>"},{"location":"python_stack/fast_api/","title":"FastAPI\u00b6","text":"<p>FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.</p> <p>FastAPI is a modern Python web framework that leverage the latest Python features to provide you with a simple way to build APIs. It is based on standard Python type hints and is designed to be easy to use and learn. FastAPI is built on top of Starlette for the web parts and Pydantic for the data parts.</p>"},{"location":"python_stack/fast_api/#quick-understanding","title":"Quick Understanding\u00b6","text":"<ul> <li>Fast: Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.</li> <li>Fast to code: Increase the speed to develop features by about 200% to 300%. </li> <li>Fewer bugs: Reduce about 40% of human (developer) induced errors. *</li> <li>Easy: Designed to be easy to use and learn. Less time reading docs.</li> <li>Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.</li> <li>Robust: Get production-ready code. With automatic interactive documentation.</li> <li>Standards-based: Based on standard Python type hints. It is fully type-checkable.</li> <li>Fully asynchronous: Supports type hints natively. Performant execution. </li> <li>Automatic interactive API documentation: Swagger UI, ReDoc, and OpenAPI.</li> </ul>"},{"location":"python_stack/fast_api/#installation","title":"Installation\u00b6","text":"<p>You can install FastAPI using pip:</p> <pre><code>pip install fastapi\n</code></pre>"},{"location":"python_stack/fast_api/#hello-world","title":"Hello world\u00b6","text":"<p>Here is a simple example of a FastAPI application:</p>"},{"location":"python_stack/python_programming/","title":"Python Programming\u00b6","text":"<p>Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages.</p> <p>Python is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning Python:</p> <ul> <li> <p>Python is Interpreted \u2212 Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.</p> </li> <li> <p>Python is Interactive \u2212 You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.</p> </li> <li> <p>Python is Object-Oriented \u2212 Python supports Object-Oriented style or technique of programming that encapsulates code within objects.</p> </li> <li> <p>Python is a Beginner's Language \u2212 Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.</p> </li> </ul>"},{"location":"python_stack/python_programming/#python-features","title":"Python Features\u00b6","text":"<p>Python's features include \u2212</p> <ul> <li> <p>Easy-to-learn \u2212 Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.</p> </li> <li> <p>Easy-to-read \u2212 Python code is more clearly defined and visible to the eyes.</p> </li> <li> <p>Easy-to-maintain \u2212 Python's source code is fairly easy-to-maintain.</p> </li> <li> <p>A broad standard library \u2212 Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.</p> </li> <li> <p>Interactive Mode \u2212 Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.</p> </li> <li> <p>Portable \u2212 Python can run on a wide variety of hardware platforms and has the same interface on all platforms.</p> </li> <li> <p>Extendable \u2212 You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.</p> </li> <li> <p>Databases \u2212 Python provides interfaces to all major commercial databases.</p> </li> <li> <p>GUI Programming \u2212 Python supports GUI applications that can be created and ported to many system calls, libraries, and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.</p> </li> <li> <p>Scalable \u2212 Python provides a better structure and support for large programs than shell scripting.</p> </li> </ul> <p>Apart from the above-mentioned features, Python has a big list of good features, few are listed below \u2212</p> <ul> <li>It supports functional and structured programming methods as well as OOP.</li> <li>It can be used as a scripting language or can be compiled to byte-code for building large applications.</li> <li>It provides very high-level dynamic data types and supports dynamic type checking.</li> <li>It supports automatic garbage collection.</li> <li>It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.</li> </ul>"},{"location":"python_stack/python_programming/#python-environment-setup","title":"Python Environment Setup\u00b6","text":"<p>Python is available on a wide variety of platforms including Linux and Mac OS X. Let's understand how to set up our Python environment.</p>"},{"location":"python_stack/python_programming/#local-environment-setup","title":"Local Environment Setup\u00b6","text":"<p>If you are still willing to set up your environment for Python, you need to set up the Python environment on your computer. Depending on your operating system, you can follow any of the following guides to install Python on your computer.</p> <ul> <li>How to set up Python on Windows?</li> <li>How to set up Python on Linux?</li> <li>How to set up Python on Mac?</li> </ul>"},{"location":"python_stack/python_programming/#online-python-compilers","title":"Online Python Compilers\u00b6","text":"<p>If you don't want to set up your environment, you can use online Python compilers. Here are some of the popular online Python compilers:</p> <ul> <li>Python (v2.7.13)</li> <li>Python (v3.2.3)</li> </ul>"},{"location":"python_stack/python_programming/#python-syntax","title":"Python Syntax\u00b6","text":"<p>Python was designed to for readability, and has some similarities to the English language with influence from mathematics. Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.</p> <p>Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.</p> <p>Here is an example of Python code that uses indentation:</p> example.py<pre><code>for x in range(10):\n    print(x)\n    if x == 5:\n        break\n</code></pre>"},{"location":"python_stack/python_programming/#python-identifiers","title":"Python Identifiers\u00b6","text":"<p>A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p> <p>Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus, <code>Manpower</code> and <code>manpower</code> are two different identifiers in Python.</p> <p>Here are naming conventions for Python identifiers \u2212</p> <ul> <li>Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</li> <li>Starting an identifier with a single leading underscore indicates that the identifier is private.</li> <li>Starting an identifier with two leading underscores indicates a strongly private identifier.</li> <li>If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.</li> </ul>"},{"location":"python_stack/python_programming/#reserved-words","title":"Reserved Words\u00b6","text":"<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constants or variables or any other identifier names. All the Python keywords contain lowercase letters only.</p> <pre><code>and       exec      not      assert    finally   or        break\nfor       pass      class    from      print     continue  global\nraise     def       if       return    del       import    try\nelif      in        while    else      is        with      except\nlambda    yield     False    True      None\n</code></pre>"},{"location":"python_stack/python_programming/#lines-and-indentation","title":"Lines and Indentation\u00b6","text":"<p>Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</p> <p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example \u2212</p> example.py<pre><code>if True:\n    print(\"True\")\nelse:\n    print(\"False\")\n</code></pre> <p>However, the following block generates an error \u2212</p> example.py<pre><code>if True:\n    print(\"Answer\")\n    print(\"True\")\nelse:\n    print(\"Answer\")\n  print(\"False\")  # IndentationError: unexpected indent\n</code></pre>"},{"location":"python_stack/python_programming/#multi-line-statements","title":"Multi-Line Statements\u00b6","text":"<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character () to denote that the line should continue. For example \u2212</p> example.py<pre><code>total = item_one + \\\n        item_two + \\\n        item_three\n</code></pre> <p>Statements contained within the <code>[], {}, or ()</code> brackets do not need to use the line continuation character. For example \u2212</p> example.py<pre><code>days = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n</code></pre>"},{"location":"python_stack/python_programming/#quotation-in-python","title":"Quotation in Python\u00b6","text":"<p>Python accepts single ('), double (\") and triple (''' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string.</p> <p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal \u2212</p> <pre><code>word = 'word'\nsentence = \"This is a sentence.\"\nparagraph = \"\"\"This is a paragraph. It is\nmade up of multiple lines and sentences.\"\"\"\n</code></pre>"},{"location":"python_stack/python_programming/#comments-in-python","title":"Comments in Python\u00b6","text":"<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p> example.py<pre><code># First comment\nprint(\"Hello, Python!\")  # second comment\n</code></pre> <p>This produces the following result \u2212</p> <pre><code>Hello, Python!\n</code></pre>"},{"location":"python_stack/python_programming/#using-blank-lines","title":"Using Blank Lines\u00b6","text":"<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p> <p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>"},{"location":"python_stack/python_programming/#waiting-for-the-user","title":"Waiting for the User\u00b6","text":"<p>The following line of the program displays the prompt, the statement saying \"Press the enter key to exit\", and waits for the user to take action \u2212</p> example.py<pre><code>input(\"\\n\\nPress the enter key to exit.\")\n</code></pre> <p>Here, <code>\\n\\n</code> is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>"},{"location":"python_stack/python_programming/#multiple-statements-on-a-single-line","title":"Multiple Statements on a Single Line\u00b6","text":"<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon \u2212</p> example.py<pre><code>import sys; x = 'foo'; sys.stdout.write(x + '\\n')\n</code></pre>"},{"location":"python_stack/python_programming/#multiple-statement-groups-as-suites","title":"Multiple Statement Groups as Suites\u00b6","text":"<p>A group of individual statements, which make a single code block are called suites in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p> <p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example \u2212</p> example.py<pre><code>if expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n</code></pre>"},{"location":"python_stack/python_programming/#command-line-arguments","title":"Command Line Arguments\u00b6","text":"<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h \u2212</p> <pre><code>$ python -h   \nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n[ etc. ]\n</code></pre>"},{"location":"python_stack/python_programming/#python-variable-types","title":"Python - Variable Types\u00b6","text":"<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variablstr = 'Hello World!' print(str)           # Prints complete string print(str[0])        # Prints first character of the string print(str[2:5])      # Prints characters starting from 3rd to 5th</p> <p>print(str[2:])       # Prints string starting from 3rd character print(str * 2)       # Prints string two times print(str + \"TEST\")  # Prints concatenated stringlicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p> <p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example \u2212</p> example.py<pre><code>counter = 100          # An integer assignment\nmiles   = 1000.0       # A floating point\nname    = \"John\"       # A string\n\nprint(counter)\nprint(miles)\nprint(name)\n</code></pre> <p>Here, 100, 1000.0 and \"John\" are the values assigned to counter, miles, and name variables, respectively. This produces the following result \u2212</p> <pre><code>100 \n1000.0\nJohn\n</code></pre>"},{"location":"python_stack/python_programming/#multiple-assignment","title":"Multiple Assignment\u00b6","text":"<p>Python allows you to assign a single value to several variables simultaneously. For example \u2212</p> example.py<pre><code>a = b = c = 1\n</code></pre> <p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example \u2212</p> example.py<pre><code>a, b, c = 1, 2, \"john\"\n</code></pre> <p>Here, two integer objects with values 1 and 2 are assigned to variables a and b, and one string object with the value \"john\" is assigned to the variable c.</p>"},{"location":"python_stack/python_programming/#standard-data-types","title":"Standard Data Types\u00b6","text":"<p>The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.</p> <p>Python has five standard data types \u2212</p> <ul> <li>Numbers</li> <li>String</li> <li>List</li> <li>Tuple</li> <li>Dictionary</li> </ul>"},{"location":"python_stack/python_programming/#python-numbers","title":"Python Numbers\u00b6","text":"<p>Number data types store numeric values. Number objects are created when you assign a value to them. For example \u2212</p> <pre><code>var1 = 1\nvar2 = 10\n</code></pre> <p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is \u2212</p> example.py<pre><code>del var1[,var2[,var3[....,varN]]]\n</code></pre> <p>You can delete a single object or multiple objects by using the del statement. For example \u2212</p> example.py<pre><code>del var\ndel var_a, var_b\n</code></pre> <p>Python supports four different numerical types \u2212</p> <ul> <li>int (signed integers)</li> <li>long (long integers, they can also be represented in octal and hexadecimal)</li> <li>float (floating point real values)</li> <li>complex (complex numbers)</li> </ul> <p>Here are some examples of numbers \u2212</p> <pre><code>int\nlong\nfloat\ncomplex\n</code></pre>"},{"location":"python_stack/python_programming/#python-strings","title":"Python Strings\u00b6","text":"<p>Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p> <p>The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example \u2212</p> example.py<pre><code>str = 'Hello World!'\nprint(str)           # Prints complete string\nprint(str[0])        # Prints first character of the string\nprint(str[2:5])      # Prints characters starting from 3rd to 5th\n\nprint(str[2:])       # Prints string starting from 3rd character  \nprint(str * 2)       # Prints string two times\nprint(str + \"TEST\")  # Prints concatenated string\n</code></pre> <p>This will produce the following result \u2212</p> <pre><code>Hello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n</code></pre>"},{"location":"python_stack/python_programming/#python-lists","title":"Python Lists\u00b6","text":"<p>Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p> <p>The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example \u2212</p> example.py<pre><code>list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\nprint(list)            # Prints complete list\nprint(list[0])         # Prints first element of the list\nprint(list[1:3])       # Prints elements starting from 2nd till 3rd\nprint(list[2:])        # Prints elements starting from 3rd element\nprint(tinylist * 2)    # Prints list two times\nprint(list + tinylist) # Prints concatenated lists\n</code></pre> <p>This will produce the following result \u2212</p> <pre><code>['abcd', 786, 2.23, 'john', 70.200000000000003]\nabcd\n[786, 2.23]\n[2.23, 'joif expression:\n   statement(s) 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.200000000000003, 123, 'john']\n</code></pre>"},{"location":"python_stack/python_programming/#python-tuples","title":"Python Tuples\u00b6","text":"<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p> <p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists. For example \u2212</p> <p>``` pytif expression1:    statement(s) elif expression2:    statement(s) elif expression3:    statement(s) else:    statement(s)            # Prints complete tuple print(tuple[0])          # Prints first element of the tuple print(tuple[1:3])        # Prints elements starting from 2nd till 3rd print(tuple[2:])         # Prints elements starting from 3rd element print(tinytuple * 2)     # Prints tuple two times  print(tuple + tinytuple) # Prints concatenated tuple <pre><code>This will produce the following result \u2212\n\n``` python linenums=\"1\"\n('abcd', 786, 2.23, 'john', 70.20000000000if expression1:\n   statement(s)\nelif expression2:\n   statement(s)\nelif expression3:\n   statement(s)\nelse:\n   statement(s)00000000003, 123, 'john')\n</code></pre></p>"},{"location":"python_stack/python_programming/#python-dictionary","title":"Python Dictionary\u00b6","text":"<p>Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p> <p>Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example \u2212</p> example.py<pre><code>dict = {}\ndict['one'] = \"This is one\"\ndict[2]     = \"This is two\"\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\nprint(dict['one'])       # Prints value for 'one' key\nprint(dict[2])           # Prints value for 2 key\nprint(tinydict)          # Prints complete dictionary\nprint(tinydict.keys())   # Prints all the keys\nprint(tinydict.values()) # Prints all the values\n</code></pre> <p>This will produce the following result \u2212</p> <pre><code>This is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n</code></pre>"},{"location":"python_stack/python_programming/#data-type-conversion","title":"Data Type Conversion\u00b6","text":"<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type-name as a function.</p> <p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p> <ul> <li><code>int(x [,base])</code> \u2212 Converts x to an integer. The base specifies the base if x is a string.</li> <li><code>long(x [,base] )</code> \u2212 Converts x to a long integer. The base specifies the base if x is a string.</li> <li><code>float(x)</code> \u2212 Converts x to a floating-point number.</li> <li><code>complex(real [,imag])</code> \u2212 Creates a complex number.</li> <li><code>str(x)</code> \u2212 Converts object x to a string representation.</li> <li><code>repr(x)</code> \u2212 Converts object x to an expression string.</li> <li><code>eval(str)</code> \u2212 Evaluates a string and returns an object.</li> <li><code>tuple(s)</code> \u2212 Converts s to a tuple.</li> <li><code>list(s)</code> \u2212 Converts s to a list.</li> <li><code>set(s)</code> \u2212 Converts s to a set.</li> <li><code>dict(d)</code> \u2212 Creates a dictionary. d must be a sequence of (key,value) tuples.</li> </ul>"},{"location":"python_stack/python_programming/#python-basic-operators","title":"Python - Basic Operators\u00b6","text":"<p>Operators are the constructs which can manipulate the value of operands. Consider the expression 4 + 5 = 9. Here, 4 and 5 are called operands and + is called operator.</p> <p>Python language supports the following types of operators \u2212 </p> <ul> <li>Arithmetic Operators</li> <li>Comparison (Relational) Operators</li> <li>Assignment Operators</li> <li>Logical Operators</li> <li>Bitwise Operators</li> <li>Membership Operators</li> <li>Identity Operators</li> </ul>"},{"location":"python_stack/python_programming/#python-decision-making","title":"Python - Decision Making\u00b6","text":"<p>Decision making is required when we want to execute a code only if a certain condition is satisfied.</p> <p>The <code>if\u2026elif\u2026else</code> statement is used in Python for decision making.</p>"},{"location":"python_stack/python_programming/#if-statement-syntax","title":"if statement syntax\u00b6","text":"example.py<pre><code>if expression:\n   statement(s)\n</code></pre> <p>Here, the program evaluates the <code>expression</code> and will execute <code>statement(s)</code> only if the <code>expression</code> is <code>True</code>.</p> <p>If the <code>expression</code> is <code>False</code>, the statement(s) is not executed.</p> <p>Python interprets non-zero values as <code>True</code>. <code>None</code> and <code>0</code> are interpreted as <code>False</code>.</p>"},{"location":"python_stack/python_programming/#ifelifelse-statement","title":"if...elif...else statement\u00b6","text":"<p>An <code>if</code> statement can be followed by an optional <code>elif...else</code> statement, which is very useful to test various conditions using single <code>if...elif...else</code> statement.</p> <p>Here is the syntax of <code>if...elif...else</code> statement \u2212</p> example.py<pre><code>if expression1:\n   statement(s)\nelif expression2:\n   statement(s)\nelif expression3:\n   statement(s)\nelse:\n   statement(s)\n</code></pre> <p>The <code>elif</code> is short for else if. It allows us to check for multiple expressions.</p> <p>If the <code>expression1</code> is <code>True</code>, it executes the <code>statement(s)</code> that are present inside the <code>if</code> block. If <code>expression1</code> is <code>False</code>, it checks the <code>expression2</code> and executes the <code>statement(s)</code> that are present inside the <code>elif</code> block.</p> <p>The <code>elif</code> block is <code>executed</code> if the <code>first</code> <code>expression</code> is <code>False</code>.</p> <p>If none of the expressions is <code>True</code>, the <code>else</code> block is executed.</p>"},{"location":"python_stack/python_programming/#python-loops","title":"Python - Loops\u00b6","text":"<p>Python programming language provides following types of loops to handle looping requirements.</p> <ul> <li><code>while</code> loop</li> <li><code>for</code> loop</li> </ul>"},{"location":"python_stack/python_programming/#the-while-loop","title":"The <code>while</code> Loop\u00b6","text":"<p>A <code>while</code> loop statement in Python programming language repeatedly executes a target statement as long as a given condition is <code>True</code>.</p> <p>Here, <code>statement(s)</code> may be a single statement or a block of statements. The <code>condition</code> may be any expression, and <code>true</code> is any non-zero value. The loop iterates while the <code>condition</code> is <code>true</code>.</p> <p>When the <code>condition</code> becomes <code>false</code>, program control passes to the line immediately following the loop.</p> <p>The syntax of a <code>while</code> loop in Python programming language is \u2212</p> example.py<pre><code>while expression:\n   statement(s)\n</code></pre> <p>Here, <code>statement(s)</code> may be a single statement or a block of statements. The <code>condition</code> may be any expression, and <code>true</code> is any non-zero value. The loop iterates while the <code>condition</code> is <code>true</code>.</p> <p>When the <code>condition</code> becomes <code>false</code>, program control passes to the line immediately following the loop.</p>"},{"location":"python_stack/python_programming/#the-for-loop","title":"The <code>for</code> Loop\u00b6","text":"<p>The <code>for</code> loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. Iterating over a sequence is called traversal.</p> <p>The syntax of the <code>for</code> loop is as follows \u2212</p> example.py<pre><code>for iterating_var in sequence:\n   statements(s)\n</code></pre> <p>If a sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable <code>iterating_var</code>. Next, the statements block is executed. Each item in the list is assigned to <code>iterating_var</code>, and the statement(s) block is executed until the entire sequence is exhausted.</p>"},{"location":"python_stack/python_programming/#python-functions","title":"Python - Functions\u00b6","text":"<p>A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.</p> <p>As you already know, Python gives you many built-in functions like <code>print()</code>, etc. but you can also create your own functions. These functions are called user-defined functions.</p>"},{"location":"python_stack/python_programming/#defining-a-function","title":"Defining a Function\u00b6","text":"<p>You can define functions to provide the required functionality. Here are simple rules to define a function in Python.</p> <ul> <li>Function blocks begin with the keyword <code>def</code> followed by the function name and parentheses <code>( )</code>.</li> <li>Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.</li> <li>The first statement of a function can be an optional statement - the documentation string of the function or docstring.</li> <li>The code block within every function starts with a colon (:) and is indented.</li> <li>The statement <code>return [expression]</code> exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as <code>return None</code>.</li> </ul>"},{"location":"python_stack/python_programming/#syntax","title":"Syntax\u00b6","text":"example.py<pre><code>def functionname( parameters ):\n   \"function_docstring\"\n   function_suite\n   return [expression]\n</code></pre> <p>By default, parameters have a positional behavior and you need to inform them in the same order that they were defined.</p>"},{"location":"python_stack/python_programming/#example","title":"Example\u00b6","text":"<p>Here is a simple example of a function \u2212</p> example.py<pre><code>def printme( str ):\n   \"This prints a passed string into this function\"\n   print(str)\n   return\n</code></pre>"},{"location":"python_stack/python_programming/#calling-a-function","title":"Calling a Function\u00b6","text":"<p>Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code.</p> <p>Once the basic structure of a function is finalized, you can execute it by calling it from another function or directly from the Python prompt. Following is the example to call printme() function \u2212</p> example.py<pre><code># Function definition is here\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print(str)\n   return\n\n# Now you can call printme function\n\nprintme(\"I'm first call to user defined function!\")\nprintme(\"Again second call to the same function\")\n</code></pre> <p>This will produce the following result \u2212</p> example.py<pre><code>I'm first call to user defined function!\nAgain second call to the same function\n</code></pre>"},{"location":"python_stack/snippet/","title":"Python and Javascript Stack Snippet \ud83d\udc0d\ud83d\udcdc\u00b6","text":"<p>Welcome to my collection of Python and JavaScript code snippets! This repository contains a variety of code examples for common programming tasks, algorithms, data structures, and more. Whether you're a beginner or an experienced developer, you'll find something useful here to enhance your coding skills.</p>"},{"location":"python_stack/snippet/#table-of-contents","title":"Table of Contents\u00b6","text":"<ul> <li>Overview</li> <li>Python Snippets</li> <li>JavaScript Snippets</li> <li>Algorithms</li> <li>Data Structures</li> <li>Web Development</li> <li>Machine Learning</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"python_stack/snippet/#overview","title":"Overview\u00b6","text":"<p>This repository serves as a reference guide for Python and JavaScript developers looking to improve their coding skills and learn new concepts. The code snippets cover a wide range of topics, including string manipulation, list operations, sorting algorithms, data structures, web development, and machine learning.</p>"},{"location":"python_stack/snippet/#python-snippets","title":"Python Snippets\u00b6","text":""},{"location":"python_stack/snippet/#1-reverse-a-string","title":"1. Reverse a String\u00b6","text":"<pre><code>def reverse_string(s):\n    return s[::-1]\n</code></pre>"},{"location":"python_stack/snippet/#2-check-for-anagrams","title":"2. Check for Anagrams\u00b6","text":"<pre><code>def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n</code></pre>"},{"location":"python_stack/snippet/#3-find-the-maximum-element-in-a-list","title":"3. Find the Maximum Element in a List\u00b6","text":"<pre><code>def find_max(lst):\n    return max(lst)\n</code></pre>"},{"location":"python_stack/snippet/#javascript-snippets","title":"JavaScript Snippets\u00b6","text":""},{"location":"python_stack/snippet/#1-reverse-an-array","title":"1. Reverse an Array\u00b6","text":"<pre><code>function reverseArray(arr) {\n    return arr.reverse();\n}\n</code></pre>"},{"location":"python_stack/snippet/#2-check-for-palindromes","title":"2. Check for Palindromes\u00b6","text":"<pre><code>function isPalindrome(str) {\n    return str === str.split('').reverse().join('');\n}\n</code></pre>"},{"location":"python_stack/snippet/#3-find-the-minimum-element-in-an-array","title":"3. Find the Minimum Element in an Array\u00b6","text":"<pre><code>function findMin(arr) {\n    return Math.min(...arr);\n}\n</code></pre>"},{"location":"python_stack/snippet/#algorithms","title":"Algorithms\u00b6","text":""},{"location":"python_stack/snippet/#1-bubble-sort","title":"1. Bubble Sort\u00b6","text":"<pre><code>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n</code></pre>"},{"location":"python_stack/snippet/#2-quick-sort","title":"2. Quick Sort\u00b6","text":"<pre><code>def quick_sort(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x &lt; pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x &gt; pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n</code></pre>"},{"location":"python_stack/snippet/#data-structures","title":"Data Structures\u00b6","text":""},{"location":"python_stack/snippet/#1-stack-implementation","title":"1. Stack Implementation\u00b6","text":"<pre><code>class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def is_empty(self):\n        return len(self.items) == 0\n</code></pre>"},{"location":"python_stack/snippet/#2-queue-implementation","title":"2. Queue Implementation\u00b6","text":"<pre><code>from collections import deque \n\nclass Queue:\n    def __init__(self):\n        self.items = deque()\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        return self.items.popleft()\n\n    def is_empty(self):\n        return len(self.items) == 0\n</code></pre>"},{"location":"python_stack/snippet/#web-development","title":"Web Development\u00b6","text":""},{"location":"python_stack/snippet/#1-simple-http-server-in-python","title":"1. Simple HTTP Server in Python\u00b6","text":"<pre><code>import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Serving at port\", PORT)\n    httpd.serve_forever()\n</code></pre>"},{"location":"python_stack/snippet/#2-fetch-api-in-javascript","title":"2. Fetch API in JavaScript\u00b6","text":"<pre><code>fetch('https://api.example.com/data')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"python_stack/snippet/#machine-learning","title":"Machine Learning\u00b6","text":""},{"location":"python_stack/snippet/#1-linear-regression-in-python","title":"1. Linear Regression in Python\u00b6","text":"<pre><code>import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([2, 4, 5, 4, 5])\n\nmodel = LinearRegression().fit(X, y)\nprint(\"Intercept:\", model.intercept_)\nprint(\"Slope:\", model.coef_)\n</code></pre>"},{"location":"python_stack/snippet/#utility-functions","title":"Utility Functions\u00b6","text":""},{"location":"python_stack/snippet/#references","title":"References\u00b6","text":"<p>python Github tutorials</p>"},{"location":"web_development/","title":"Web Development\u00b6","text":""},{"location":"web_development/#frontend-development","title":"Frontend Development \ud83c\udf10\u00b6","text":"<p>The frontend development section is all about building the client-side of web applications. It covers everything needed to create interactive and visually appealing user interfaces:</p> <ul> <li>HTML: The structure and foundation of web pages.</li> <li>CSS: Styling and layout techniques, including modern concepts like Flexbox, Grid, and responsive design.</li> <li>JavaScript: The logic and interactivity of web applications, covering ES6+ features, DOM manipulation, event handling, and more.</li> <li>Frameworks &amp; Libraries: Focus on popular tools like React, Vue, or Angular, which streamline building scalable and dynamic user interfaces.</li> <li>UI/UX Principles: Concepts of designing user-friendly and visually consistent interfaces, including typography, color theory, and accessibility.</li> <li>Performance Optimization: Techniques to enhance the loading speed, responsiveness, and overall user experience of web applications.</li> </ul> <p>This section contains practical exercises, code snippets, and mini-projects that demonstrate how to create interactive, responsive, and modern frontend applications.</p>"},{"location":"web_development/#backend-development","title":"Backend Development \ud83d\udd27\u00b6","text":"<p>The backend development section focuses on building the server-side logic that powers web applications. It involves the following key concepts and technologies:</p> <ul> <li>Server-Side Programming: Writing and managing the logic behind web applications using languages and frameworks like Node.js and Express.</li> <li>APIs and RESTful Services: Designing and implementing APIs that allow communication between the frontend and backend, as well as integrating third-party services.</li> <li>Database Management: Working with relational databases (like PostgreSQL and MySQL) and NoSQL databases (like MongoDB), covering data modeling, querying, and optimizing storage.</li> <li>Authentication &amp; Authorization: Implementing secure login systems, managing user roles, and protecting routes with strategies like JWT and OAuth.</li> <li>Deployment &amp; Scaling: Deploying applications to platforms like Heroku, Vercel, or AWS, and understanding concepts like serverless architecture, load balancing, and scaling applications.</li> </ul> <p>This section includes backend-focused projects, API implementations, and best practices for designing secure, scalable, and maintainable server-side applications.</p>"}]}